# -*- coding: utf-8 -*-
"""Final_Simplex_From_Scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wEQu1ayMQv3bU0eezOEkmnlC7uT5iRrK

# Importing Modules
"""

import numpy as np
import math

"""#Minimization Simplex Algorithm In Python"""

def simplex_matrix(A,b,c):
  """
  Generates the table for performing simplex in tabular form
  """
  matrix = []
  for i in range(len(A)):
    matrix.append(A[i]+[b[i]])

  matrix.append(c+[0])
  return np.array(matrix,dtype=float)

def is_not_optimal(matrix):
  """
  Checks if further optimization is possible
  
  If any of the reduced cost vector entries is less than 0
  it returns True, else it returns False
  """
  cost = matrix[-1][:-1]
  return np.any(cost<0)

def entering_variable(matrix):
  """
  Returns the index of the minimum cost vector, 
  the entering variable column
  """
  cost = matrix[-1][:-1]
  return np.argmin(cost)

def leaving_variable(enter,matrix):
  """
  returns the row with minimum ratio of bj/aij,
  the leaving variable row
  """
  minRatio = math.inf
  leave = 0
  for i in range(len(matrix)-1):
    aij= matrix[i][enter]
    bj = matrix[i][-1]
    if aij>0:
      ratio = bj/aij
      if ratio<minRatio:
        minRatio = ratio
        leave = i
  return leave

def perform_row_operations(leave,enter,matrix):
  """
  performs elementary row transformations 
  """
  div = matrix[leave][enter]
  for i in range(len(matrix[leave])):
    matrix[leave][i]/=div
  
  for i in range(len(matrix)):
    if i!=leave:
      num = matrix[i][enter]
      matrix[i] = matrix[i] - num*matrix[leave]
  return matrix

def check(col):
  """
  Checks if the columns has n-1 zeros and 1 one,
  Returns this boolean value and the index of 1
  """
  zero = 0
  one = 0
  oneIndex = -1
  for i in range(len(col)):
    if col[i]==0:
      zero+=1
    elif col[i]==1:
      one+=1
      oneIndex = i
  return zero==len(col)-1 and one==1,oneIndex

def get_optimal_solution(matrix):
  """
  Generates the solution from the simplex table
  """
  cols = matrix.T
  ans = np.zeros(len(cols)-1)
  for i in range(len(cols)-1):
    basic,oneIndex = check(cols[i])
    if(basic):
      ans[i] = cols[-1][oneIndex]
  return ans

def simplex(A,b,c,no_of_variables,d=[],max=False,print_iterations=False):
  """
  Simplex Method in tabular form
  """
  table = simplex_matrix(A,b,c)
  iteration = 1
  while True:
    if print_iterations:
      print("Iteration",iteration)
      print(table,"\n")
    if is_not_optimal(table):
      enter = entering_variable(table)
      leave = leaving_variable(enter,table)
      m = perform_row_operations(leave,enter,table)
    else:
      break
    iteration+=1

  sol = get_optimal_solution(table)
  if len(d)>0:
    sol = d
  print("The optimal solution is",sol[:no_of_variables])

  optimal_value = 0
  for i in range(len(sol)):
    optimal_value+=c[i]*sol[i]

  if max:
    optimal_value*=-1
  print("The optimal value is",optimal_value)

"""# Example"""

c = [-1,-2,-1,0,0,0]
A = [
     [2,1,-1,1,0,0],
     [2,-1,5,0,1,0],
     [4,1,1,0,0,1]
]
b = [2,6,6]

simplex(A,b,c,no_of_variables=6,print_iterations=True)

"""# Primal LPP 1"""

A1 = np.c_[np.eye(10),np.eye(10),np.zeros((10,4))]

A2 = np.array([[0,1,-1,1,0,0,-1,0,0,0],
               [1,0,1,-1,-1,1,0,0,0,0],
               [0,0,0,0,0,-1,1,1,0,-1],
               [0,0,0,0,1,0,0,-1,-1,0]])

A2 = np.c_[A2,np.zeros((4,10)),np.eye(4)]

A = np.r_[A1,A2]

b = np.array([13,16,10,4,14,9,12,7,7,20,0,0,0,0])

bigM = 1000000.
c = np.r_[[-1,-1],np.zeros(18),[bigM]*4]

a1=list(map(int,list(bin(13)[2:])))
c1=list(map(int,list(bin(7)[2:])))

simplex(A.tolist(),b.tolist(),c.tolist(),10,max = True)

"""# Primal LPP 2"""

A1 = np.c_[np.eye(31), np.eye(31), np.zeros((31,10))]

A2 = np.array([
          [1,0,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
          [0,1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
          [0,0,1,0,0,0,0,1,-1,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0,0,1,0,0,-1,-1,-1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
          [0,0,0,1,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
          [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,-1,-1,-1,-1,1,0,0,0,0,0,0],
          [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,-1,-1,-1,0,0,1,0],
          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,-1,-1,0,0],
          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,-1,-1]
])

A2 = np.c_[A2, np.zeros((10,31)), np.eye(10)]

A = np.r_[A1,A2]

b = np.array([11,15,10,18,4,3,8,5,6,3,11,4,17,6,3,16,13,12,4,21,4,9,4,3,4,5,4,7,9,2,15])
b = np.r_[b, np.zeros(10)]

bigM = 10000
c = -np.r_[[1,1,1], np.zeros(59), [-bigM]*10]

a2=list(map(int,list(bin(165)[2:])))
b2=[0]*8

simplex(A.tolist(),b.tolist(),c.tolist(),31,max = True)

x1=np.array(a1+[0]*6+c1+[0],dtype=float)
x2 = np.array(a2+b2*3+[1]+b2,dtype=float)

"""# Dual LPP 1"""

A4 = np.zeros((10,10))
for i in range(10):
  A4[i][i] = -1.0

A3 = np.array([[0,1,0,0,1,0,0,0,0,0,0,0,0,0],
               [1,0,0,0,0,1,0,0,0,0,0,0,0,0],
               [-1,1,0,0,0,0,1,0,0,0,0,0,0,0],
               [1,-1,0,0,0,0,0,1,0,0,0,0,0,0],
               [0,-1,0,1,0,0,0,0,1,0,0,0,0,0],
               [0,1,-1,0,0,0,0,0,0,1,0,0,0,0],
               [-1,0,1,0,0,0,0,0,0,0,1,0,0,0],
               [0,0,1,-1,0,0,0,0,0,0,0,1,0,0],
               [0,0,0,-1,0,0,0,0,0,0,0,0,1,0],
               [0,0,-1,0,0,0,0,0,0,0,0,0,0,1]])

A = np.c_[A3,A4,np.eye(10)]
b = np.array([1,1,0,0,0,0,0,0,0,0])
c = np.r_[np.zeros(4),[13,16,10,4,14,9,12,7,7,20],np.zeros(10),[bigM]*10]

simplex(A.tolist(),b.tolist(),c.tolist(),14,x1)

"""# Dual LPP 2"""

A1 = np.eye(31)
A1p = np.array([
                [0,1,0,0,0,0,0,0,0,0,0],
                [0,0,1,0,0,0,0,0,0,0,0],
                [0,0,0,1,0,0,0,0,0,0,0],
                [0,-1,0,0,0,1,0,0,0,0,0],
                [0,-1,0,0,0,0,1,0,0,0,0],
                [0,1,-1,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0],
                [0,0,-1,1,0,0,0,0,0,0,0],
                [0,0,0,-1,1,0,0,0,0,0,0],
                [0,0,0,-1,0,0,0,1,0,0,0],
                [0,0,0,-1,0,0,0,0,1,0,0],
                [0,0,0,1,-1,0,0,0,0,0,0],
                [0,0,0,0,-1,0,0,1,0,0,0],
                [0,0,0,0,-1,0,0,0,0,0,0],
                [0,0,0,0,1,-1,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,-1,0,0,0,1,0],
                [0,1,0,0,0,0,-1,0,0,0,0],
                [0,0,0,0,1,0,-1,0,0,0,0],
                [0,0,0,0,0,0,-1,0,0,0,0],
                [0,0,0,0,0,0,0,-1,1,0,0],
                [0,0,0,0,0,0,0,-1,0,1,0],
                [0,0,0,0,0,0,0,-1,1,0,1],
                [0,0,0,0,0,0,0,-1,0,0,0],
                [0,0,0,0,0,0,0,1,-1,0,0],
                [0,0,0,0,0,0,0,0,-1,0,1],
                [0,0,0,0,0,0,0,0,-1,0,0],
                [0,0,0,0,0,0,0,0,0,-1,0],
                [0,0,0,0,0,0,0,0,0,-1,0],
                [0,0,0,0,0,0,0,0,1,0,-1],
                [0,0,0,0,0,0,0,0,0,0,-1]

])
A1p = A1p[:, 1:]

A1q = np.array([
                [0,-1,0,0,0,0,0,0,0,0,0],
                [0,0,-1,0,0,0,0,0,0,0,0],
                [0,0,0,-1,0,0,0,0,0,0,0],
                [0,1,0,0,0,-1,0,0,0,0,0],
                [0,1,0,0,0,0,-1,0,0,0,0],
                [0,1,-1,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,-1,0,0,0,0,0,0,0],
                [0,0,0,1,-1,0,0,0,0,0,0],
                [0,0,0,1,0,0,0,-1,0,0,0],
                [0,0,0,1,0,0,0,0,-1,0,0],
                [0,0,0,-1,1,0,0,0,0,0,0],
                [0,0,0,0,1,0,0,-1,0,0,0],
                [0,0,0,0,1,0,0,0,0,0,0],
                [0,0,0,0,-1,1,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,1,0,0,0,-1,0],
                [0,-1,0,0,0,0,1,0,0,0,0],
                [0,0,0,0,-1,0,1,0,0,0,0],
                [0,0,0,0,0,0,1,0,0,0,0],
                [0,0,0,0,0,0,0,1,-1,0,0],
                [0,0,0,0,0,0,0,1,0,-1,0],
                [0,0,0,0,0,0,0,1,-1,0,-1],
                [0,0,0,0,0,0,0,1,0,0,0],
                [0,0,0,0,0,0,0,-1,1,0,0],
                [0,0,0,0,0,0,0,0,1,0,-1],
                [0,0,0,0,0,0,0,0,1,0,0],
                [0,0,0,0,0,0,0,0,0,1,0],
                [0,0,0,0,0,0,0,0,0,1,0],
                [0,0,0,0,0,0,0,0,-1,0,1],
                [0,0,0,0,0,0,0,0,0,0,1],
])
A1q = A1q[:, 1:]

A1 = np.c_[A1, A1p, A1q]
A2 = np.c_[-np.eye(31), np.eye(31)]
A = -np.c_[A1, A2]

b = np.r_[[1,1,1], np.zeros(28)]
c = np.array([11,15,10,18,4,3,8,5,6,3,11,4,17,6,3,16,13,12,4,21,4,9,4,3,4,5,4,7,9,2,15])

bigM = 10000
c = np.r_[c, np.zeros(51), [bigM]*31]

simplex(A.tolist(),b.tolist(),c.tolist(),41,x2)

